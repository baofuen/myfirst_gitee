git log --graph --pretty=oneline --abbrev-commit获取历史信息
一：git分支

1 git checkout -b dev	创建dev分支，然后切换到dev分支
	相当于：git branch dev  创建分支
	git checkout dev	切换分支
2 git branch 	查看当前分支，当前分支前面会标一个*号

3 分支合并：合并分支时，加上--no-ff参数就可以用普通模式合并，
合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并 
	git merge dev	用于合并指定分支到当前分支。默认用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息
	git merge --no-ff -m "merge with no-ff" dev


4 git branch -d dev	删除dev分支

5 合并分支的冲突：
	解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。

6 bug分支：
	git stash	把当前工作现场“储藏”起来，等以后恢复现场后继续工作
	git stash list  查看存储的工作现场
	git stash pop	恢复的同时把stash内容也删了
	下面两个命令等价于上面一个
		git stash apply	恢复工作现场
		git stash drop	删除存储的工作现场

7 Feature分支：
	销毁失败：Git友情提醒，分支还没有被合并，如果删除，将丢失掉修改
	git branch -D feature1	强行删除，需要使用大写的-D参数

8 协作开发：
	git remote	查看远程库的信息，默认名称是origin
	git remote -v	显示更详细的信息
	
master分支是主分支，因此要时刻与远程同步；

dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；

bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；

feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。
	git push origin master 	推送master分支，
	git push origin dev	推送dev分支

协作开发步骤：
	首先，可以试图用git push origin <branch-name>推送自己的修改；

	如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

	如果合并有冲突，则解决冲突，并在本地提交；

	没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！

	如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，
	用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。
	
详细信息：
	1 从远程库clone时，默认情况下，只能看到本地的master分支
	要在dev分支上开发，就必须创建远程origin的dev分支到本地
		git checkout -b dev origin/dev
	2 可以在dev上继续修改，然后，时不时地把dev分支push到远程
		git add env.txt
		git commit -m "add env"
		git push origin dev
	3 当两个人同时推送时，会出现提交冲突
		解决办法：先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送：
		git pull
	4 git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：
		git branch --set-upstream-to=origin/dev dev
		git pull
	5 但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push：
		git push origin dev
9 rebase：可以把本地未push的分叉提交历史整理成直线；
rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。
	
	git rebase	把分叉的提交历史“整理”成一条直线，看上去更直观。缺点是本地的分叉提交已经被修改过了。
